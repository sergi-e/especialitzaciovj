Shader "Unlit/healthBar"
{
    Properties
    {
        [NoScaleOffset] _MainTex ("Texture", 2D) = "white" {} //Llevem de l'inspector les opcions de scale i offset per a la textura
		_Health("Health", Range(0,1)) = 1
    }
    SubShader
    {
		Tags { 
		"RenderType" = "Transparent"
		"Queue" = "Transparent"
		//Generalmente queremos uqe todos los objetos transparentes se rendericen después de los opacos, porque si el objeto transparente queda detrás del opaco, no queremos renderizarlo
		}

        Pass
        {

			ZWrite Off
			//BLENDING MODES: sourceColor * x + destinationColor * Y --> Cambiamos básicamente X, Y y el operador +/-/*//
			//Source es el color con el que estamos operando y destination es el color que hay en el renderizado por ahora, es decir, el background
			//Alpha blending: source * sourceAlpha + destination * (1-sourceAlpha) --> Es esencialmente un lerp
			Blend SrcAlpha OneMinusSrcAlpha
			

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
			float _Health;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv, _MainTex;
                return o;
            }

			float InverseLerp(float a, float b, float v) {
				return (v - a) / (b - a);
			}

			fixed4 frag(v2f i) : SV_Target
			{

				float healthBarMask = _Health > i.uv.x; //Adelantamos esto para clipear lo antes posible y ahorrar cálculo
				//Dependiendo de si el valor es cero, descarta el fragmento renderizado. No hará output.  ASí quitamos el fondo negro.
				//Una ventaja de hacer la transparencia así y no por blending, nos ahorramos el tema de órdenes de renderizado y démás. 
				//El problema es que solo hay dos opciones: o renderiza, o no (y por tanto es totalmente transparente) NO hay blendeo 
				//clip(healthBarMask - 0.05);

				//El Saturate sirve para clampear los valores entre 0 y 1. 
				//El inverseLerp nos remapea los valores de modo que 0.2 pasa a ser 0 y 0.8 pasa a ser 1
				float tHealthColor = saturate(InverseLerp(0.2, 0.8, _Health));

				float3 healthBarColor = lerp(float3(1, 0, 0), float3(0, 1, 0), tHealthColor);
				//float3 bgColor = float3(0, 0, 0);
				//float3 outColor = lerp(float3(0,0,0), healthBarColor, healthBarMask);

				return float4(healthBarColor,healthBarMask);
            }
            ENDCG
        }
    }
}
