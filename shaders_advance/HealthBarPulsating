Shader "Unlit/healthBar"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {} //Llevem de l'inspector les opcions de scale i offset per a la textura
		_Health("Health", Range(0,1)) = 1
    }
    SubShader
    {
		Tags { 
		"RenderType" = "Transparent"
		"Queue" = "Transparent"
		//Generalmente queremos uqe todos los objetos transparentes se rendericen después de los opacos, porque si el objeto transparente queda detrás del opaco, no queremos renderizarlo
		}

        Pass
        {

			ZWrite Off
			//BLENDING MODES: sourceColor * x + destinationColor * Y --> Cambiamos básicamente X, Y y el operador +/-/*//
			//Source es el color con el que estamos operando y destination es el color que hay en el renderizado por ahora, es decir, el background
			//Alpha blending: source * sourceAlpha + destination * (1-sourceAlpha) --> Es esencialmente un lerp
			Blend SrcAlpha OneMinusSrcAlpha
			

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
			float _Health;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv, _MainTex;
                return o;
            }

			float InverseLerp(float a, float b, float v) {
				return (v - a) / (b - a);
			}

			fixed4 frag(v2f i) : SV_Target
			{

				float healthBarMask = _Health > i.uv.x; 
				float3 healthBarColor = tex2D(_MainTex, float2(_Health,i.uv.y)); //Acordarse de clampear la textura en las propiedades para que no salga el verde ese caca

				float flash = cos(_Time.y * 4) * 0.1+1; //Podríamos mover esto al vertex shader

				if (_Health < 0.25) //INtentamos evitar branching
					healthBarColor *= flash;
				

				//Al sumar o restar del color, vas a cambiar la hue, el tono. Si quieres mantener la hue
				//Si multiplicas, no cambia la hue, a menos que te vayas del rango 0 a 1 
				return float4(healthBarColor,healthBarMask);
            }
            ENDCG
        }
    }
}
